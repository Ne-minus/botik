10.**

Напишите функцию `c_align(s)`, которая принимает на вход любой текст и выводит его на экран, но не просто так, а с выравниванием по центру. 
Есть три уровня сложности для данной задачи (задача 9, 10 и 11), выберите подходящий вам и реализуйте соответствующий функционал. 

Сравните, если на вход подаётся одна и та же строка:
```
s = '''The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!'''
```

-----------------------------
Уровень сложности: нормальный
-----------------------------

Функция сохраняет изначальное деление на абзацы, но на следующую строку могут переноситься части слова (пример: r-ules, b-ad).
```
>>> c_align_norm(s)
              The Zen of Python, by Tim Peters              
                                                            
               Beautiful is better than ugly.               
             Explicit is better than implicit.             
               Simple is better than complex.               
            Complex is better than complicated.            
                Flat is better than nested.                
                Sparse is better than dense.                
                    Readability counts.                    
     Special cases aren't special enough to break the r     
                           ules.                           
            Although practicality beats purity.            
             Errors should never pass silently.             
                Unless explicitly silenced.                
     In the face of ambiguity, refuse the temptation to     
                           guess.                          
     There should be one-- and preferably only one --ob     
                    vious way to do it.                    
     Although that way may not be obvious at first unle     
                      ss you're Dutch.                      
                 Now is better than never.                 
      Although never is often better than *right* now.      
     If the implementation is hard to explain, it's a b     
                          ad idea.                          
     If the implementation is easy to explain, it may b     
                       e a good idea.                       
     Namespaces are one honking great idea -- let's do      
                       more of those!                       

```