9.* 

Напишите функцию `c_align(s)`, которая принимает на вход любой текст и выводит его на экран, но не просто так, а с выравниванием по центру. 
Есть три уровня сложности для данной задачи (задача 9, 10 и 11), выберите подходящий вам и реализуйте соответствующий функционал. 

Сравните, если на вход подаётся одна и та же строка:
```
s = '''The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!'''
```

-------------------------
Уровень сложности: лёгкий
-------------------------

Функция не работает с разделением на абзацы (строки стихотворения и т.п.) внутри s, в самом начале заменяя все символы разрыва строки ('\n') на пробел.

```
>>> c_align_easy(s)
     The Zen of Python, by Tim Peters  Beautiful is bet     
     ter than ugly. Explicit is better than implicit. S     
     imple is better than complex. Complex is better th     
     an complicated. Flat is better than nested. Sparse     
      is better than dense. Readability counts. Special     
      cases aren't special enough to break the rules. A     
     lthough practicality beats purity. Errors should n     
     ever pass silently. Unless explicitly silenced. In     
      the face of ambiguity, refuse the temptation to g     
     uess. There should be one-- and preferably only on     
     e --obvious way to do it. Although that way may no     
     t be obvious at first unless you're Dutch. Now is      
     better than never. Although never is often better      
     than *right* now. If the implementation is hard to     
      explain, it's a bad idea. If the implementation i     
     s easy to explain, it may be a good idea. Namespac     
     es are one honking great idea -- let's do more of      
     those!     
```
